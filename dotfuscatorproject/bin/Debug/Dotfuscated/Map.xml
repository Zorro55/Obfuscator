<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.2.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2017-09-27T13:31:37</timestamp>
        <product version="5.30.0.5167" user="Andrej Kozlovskij" serial="224191-391">Dotfuscator Community Edition</product>
    </header>
    <mapping>
        <module>
            <name>dotfuscatorproject.exe</name>
            <type>
                <name>dotfuscatorproject.Program</name>
                <newname>a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>Main</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
        </module>
        <module>
            <name>Wax.dll</name>
            <type>
                <name>ExpressionKit.Unwrap.ConstantValueMethodAttribute</name>
                <newname>b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExpressionKit.Unwrap.InvertVisitor</name>
                <newname>c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.Expression)</signature>
                        <name>Invert</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.BinaryExpression)</signature>
                        <name>VisitBinary</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.ConditionalExpression)</signature>
                        <name>VisitConditional</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.ConstantExpression)</signature>
                        <name>VisitConstant</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.DefaultExpression)</signature>
                        <name>VisitDefault</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.DynamicExpression)</signature>
                        <name>VisitDynamic</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.MemberExpression)</signature>
                        <name>VisitMember</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.MethodCallExpression)</signature>
                        <name>VisitMethodCall</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.UnaryExpression)</signature>
                        <name>VisitUnary</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExpressionKit.Unwrap.ReplaceVisitor</name>
                <newname>d</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.Expression)</signature>
                        <name>Visit</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Linq.Expressions.Expression</signature>
                        <name>Replacement</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Linq.Expressions.Expression</signature>
                        <name>Source</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExpressionKit.Unwrap.UnwrapVisitor</name>
                <newname>e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.CustomAttributeData)</signature>
                        <name>&lt;MethodIsThunk&gt;m__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.CustomAttributeData)</signature>
                        <name>&lt;MethodIsUnwrappable&gt;m__1</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>MethodIsThunk</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>MethodIsUnwrappable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.MethodCallExpression)</signature>
                        <name>Unthunk</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.MethodCallExpression)</signature>
                        <name>Unwrap</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.MethodCallExpression)</signature>
                        <name>VisitMethodCall</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.ParameterExpression)</signature>
                        <name>VisitParameter</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.CustomAttributeData,bool&gt;</signature>
                        <name>&lt;&gt;f__am$cache0</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.CustomAttributeData,bool&gt;</signature>
                        <name>&lt;&gt;f__am$cache1</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>ConstantValueType</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>DeclaringType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression&gt;</signature>
                        <name>Replacements</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>UnwrappableType</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExpressionKit.Unwrap.UnwrappableMethodAttribute</name>
                <newname>f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExpressionKit.Unwrap.Wax</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;[])</signature>
                        <name>All</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;)</signature>
                        <name>And</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;[])</signature>
                        <name>Any</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(!!0)</signature>
                        <name>Constant</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>!!1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,!!1&gt;&gt;, !!0)</signature>
                        <name>Expand</name>
                    </method>
                    <method>
                        <arity>3</arity>
                        <signature>!!2(System.Linq.Expressions.Expression`1&lt;System.Func`3&lt;!!0,!!1,!!2&gt;&gt;, !!0, !!1)</signature>
                        <name>Expand</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;()</signature>
                        <name>False</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;)</signature>
                        <name>Inverse</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;)</signature>
                        <name>Or</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;()</signature>
                        <name>True</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,!!1&gt;&gt;(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,!!1&gt;&gt;)</signature>
                        <name>Unwrap</name>
                    </method>
                    <method>
                        <arity>3</arity>
                        <signature>System.Linq.Expressions.Expression`1&lt;System.Func`3&lt;!!0,!!1,!!2&gt;&gt;(System.Linq.Expressions.Expression`1&lt;System.Func`3&lt;!!0,!!1,!!2&gt;&gt;)</signature>
                        <name>Unwrap</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Linq.IQueryable`1&lt;!!1&gt;(System.Linq.IQueryable`1&lt;!!0&gt;, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,!!1&gt;&gt;)</signature>
                        <name>UnwrappedSelect</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Linq.IQueryable`1&lt;!!0&gt;(System.Linq.IQueryable`1&lt;!!0&gt;, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,bool&gt;&gt;)</signature>
                        <name>UnwrappedWhere</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>7</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>41</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>8</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties</description>
            <statistic>0</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events</description>
            <statistic>0</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>6</statistic>
            <statistic>85.71 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>8</statistic>
            <statistic>19.51 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>8</statistic>
            <statistic>100.00 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties Renamed</description>
            <statistic>0</statistic>
            <statistic>0.00 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events Renamed</description>
            <statistic>0</statistic>
            <statistic>0.00 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>5</statistic>
            <statistic>12.20 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>3</statistic>
            <statistic>7.32 %</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>