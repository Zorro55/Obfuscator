<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wax</name>
    </assembly>
    <members>
        <member name="T:ExpressionKit.Unwrap.ConstantValueMethodAttribute">
            <summary>
            Used to mark constant expressions within queries.
            This attribute provides no additional functionality.
            </summary>
        </member>
        <member name="T:ExpressionKit.Unwrap.InvertVisitor">
            <summary>
            An expression visitor that inverts all
            logic in an expression tree.
            </summary>
        </member>
        <member name="T:ExpressionKit.Unwrap.ReplaceVisitor">
            <summary>
            An expression visitor that acts as a simple find
            and replace.
            </summary>
        </member>
        <member name="F:ExpressionKit.Unwrap.ReplaceVisitor.Source">
            <summary>
            The expression to find.
            </summary>
        </member>
        <member name="F:ExpressionKit.Unwrap.ReplaceVisitor.Replacement">
            <summary>
            The replacement expression.
            </summary>
        </member>
        <member name="M:ExpressionKit.Unwrap.ReplaceVisitor.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Create a new replacement visitor.
            </summary>
            <param name="source">
            The expression to find.
            </param>
            <param name="replacement">
            The replacement expression.
            </param>
        </member>
        <member name="T:ExpressionKit.Unwrap.UnwrapVisitor">
            <summary>
            Unwraps calls to <see cref="M:ExpressionKit.Unwrap.Wax.Expand``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)" />
            into the definition of the expression they call.
            </summary>
        </member>
        <member name="M:ExpressionKit.Unwrap.UnwrapVisitor.#ctor">
            <summary>
            Unwraps calls to unwrappable methods
            into the definition of the expression they call.
            </summary>
        </member>
        <member name="T:ExpressionKit.Unwrap.UnwrappableMethodAttribute">
            <summary>
            Used to declare that this method is unwrappable by an expression visitor.
            This attribute provides no additional functionality.
            </summary>
        </member>
        <member name="T:ExpressionKit.Unwrap.Wax">
            <summary>
            Extensions for runtime expansion of expressions.
            </summary>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.Constant``1(``0)">
            <summary>
            Inject a constant directly into the query.
            </summary>
            <typeparam name="TValue">
            The type of the result.
            </typeparam>
            <param name="value">
            The value to inject. It must not rely on
            parameters local to the query.
            </param>
            <returns>
            If this method is executed outside of an expression,
            it will throw an instance of <see cref="T:System.NotImplementedException" />.
            </returns>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.Expand``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
            Invoke an expression with a single parameter.
            </summary>
            <typeparam name="TParameter">
            The type of the parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the expression.
            </typeparam>
            <param name="expression">
            The expression to invoke.
            </param>
            <param name="parameter">
            The parameter to pass to the expression.
            </param>
            <returns>
            The result of the expression.
            </returns>
            <remarks>
            When used in an expression, this call can be unwrapped.
            This method should not be used outside of an unwrapped expression.
            </remarks>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.Expand``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},``0,``1)">
            <summary>
            Invoke an expression with two parameters.
            </summary>
            <typeparam name="TParam1">
            The first parameter type.
            </typeparam>
            <typeparam name="TParam2">
            The second parameter type.
            </typeparam>
            <typeparam name="TResult">
            The return type of the expression.
            </typeparam>
            <param name="expression">
            The expression to invoke.
            </param>
            <param name="param1">
            The first parameter.
            </param>
            <param name="param2">
            The second parameter.
            </param>
            <returns>
            The result of the expression.
            </returns>
            <remarks>
            When used in an expression, this call can be unwrapped.
            This method should not be used outside of an unwrapped expression.
            </remarks>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.Unwrap``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Unwraps any <see cref="M:ExpressionKit.Unwrap.Wax.Expand``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)" />
            calls
            within the given expression.
            </summary>
            <typeparam name="TParam">
            The first parameter type.
            </typeparam>
            <typeparam name="TResult">
            The return type of the expression.
            </typeparam>
            <param name="expression">
            The expression to unwrap.
            </param>
            <returns>
            The unwrapped expression.
            </returns>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.UnwrappedSelect``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Combines a call to <see cref="M:ExpressionKit.Unwrap.Wax.Unwrap``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
            with a call to
            <see cref="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
            </summary>
            <typeparam name="TSource">
            The type of the source of elements.
            </typeparam>
            <typeparam name="TResult">
            The type of the projected value.
            </typeparam>
            <param name="source">
            The source of elements.
            </param>
            <param name="expression">
            The projector.
            </param>
            <returns>
            A collection.
            </returns>
            <remarks>
            Can be useful for anonymously typed objects.
            </remarks>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.UnwrappedWhere``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines a call to <see cref="M:ExpressionKit.Unwrap.Wax.Unwrap``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
            with a call to
            <see cref="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />.
            </summary>
            <typeparam name="TSource">
            The type of the source of elements.
            </typeparam>
            <param name="source">
            The source of elements.
            </param>
            <param name="filter">
            The filter.
            </param>
            <returns>
            A collection.
            </returns>
            <remarks>
            Can be useful for anonymously typed objects.
            </remarks>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.Unwrap``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Unwraps any <see cref="M:ExpressionKit.Unwrap.Wax.Expand``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)" />
            calls
            within the given expression.
            </summary>
            <typeparam name="TParam1">
            The first parameter type.
            </typeparam>
            <typeparam name="TParam2">
            The second parameter type.
            </typeparam>
            <typeparam name="TValue">
            The return type of the expression.
            </typeparam>
            <param name="expression">
            The expression to unwrap.
            </param>
            <returns>
            The unwrapped expression.
            </returns>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.False``1">
            <summary>
            An expression that simply returns false.
            </summary>
            <typeparam name="TParam">
            The type of the parameter.
            </typeparam>
            <returns>
            An expression.
            </returns>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.True``1">
            <summary>
            An expression that simply returns true.
            </summary>
            <typeparam name="TParam">
            The type of the parameter.
            </typeparam>
            <returns>
            An expression.
            </returns>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combine two predicates with boolean OR logic.
            </summary>
            <typeparam name="TParam">
            The type of parameter for each expression.
            </typeparam>
            <param name="expression">
            The first expression.
            </param>
            <param name="condition">
            The second expression, only evaluated if the
            first returns false.
            </param>
            <returns>
            An expression.
            </returns>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combine two predicates with boolean AND logic.
            </summary>
            <typeparam name="TParam">
            The type of parameter for each expression.
            </typeparam>
            <param name="expression">
            The first expression.
            </param>
            <param name="condition">
            The second expression, not evaluated if the
            first returns false.
            </param>
            <returns>
            An expression.
            </returns>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Combine a series of expressions with boolean AND logic.
            </summary>
            <typeparam name="TParam">
            The type of parameter for every expression.
            </typeparam>
            <param name="expressions">
            The expressions.
            </param>
            <returns>
            An expression.
            </returns>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Combine a series of expressions with boolean OR logic.
            </summary>
            <typeparam name="TParam">
            The type of parameter for every expression.
            </typeparam>
            <param name="expressions">
            The expressions.
            </param>
            <returns>
            An expression.
            </returns>
        </member>
        <member name="M:ExpressionKit.Unwrap.Wax.Inverse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Invert a boolean expression.
            </summary>
            <typeparam name="TParam">
            The type of parameter for the expression.
            </typeparam>
            <param name="predicate">
            The expression.
            </param>
            <returns>
            An expression.
            </returns>
        </member>
    </members>
</doc>
